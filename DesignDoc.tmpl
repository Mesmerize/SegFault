--------------------------------------------------------------------------
Last Updated: 3/6/2022
            +-------------------------+
            | CS 450                  |
            | PROJECT: SUDOKU CHECKER |
            | DESIGN DOCUMENT         |
            +-------------------------+


---- GROUP ----

>> Fill in the names and email addresses of your group members.

Phi Do <dop@sonoma.edu>
Brandon Luna Rodriguez <lunarodr@sonoma.edu>
Erika Mendoza <mendoeri@sonoma.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission or
>> bug notes, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than man pages, course
>> text, lecture notes, and course staff.
We looked at documentation. 


               THREADED SUDOKU CHECKER
               =======================

---- EXPLORE THE PROBLEM ----

>> A1: Given the problem decomposition described in the requirements
>> for Part A, to achieve the maximum parallelism how many
>> threads would need to be running concurrently?
To achieve the maximum parallelism, there needs to be 27 threads split between 
the rows(9 threads), columns(9 threads) and the subgrids(9 threads). 

---- DATA STRUCTURES ----

>> A2: Copy here the declaration of each new or changed `struct', 
>> `struct' member, global or static variable, `typedef', or enumeration.
>> Identify the purpose of each in 2--25 words.
typedef struct {
   int rows; //the rows of the sudoku grid
   int cols; //the columns of the sudoku grid
   int res; //stores a 1 or 0, used to determine if rows, cols, etc are valid
   int (*sudokuGrid)[9]; //pointer to a grid
} Sudoku;

---- FUNCTIONS ----

>> A3: Provide a prototype and documentation for each function
>> you have introduced to support this portion of the project.
>> Use the Google Style Guide for function documentation.
void readSudoku(int (*sudokuGrid)[9], FILE *in); //reads value from stdin
void printSudoku(int x[][9]); //helper function that prints the grid
int columnValidation(Sudoku* sudoku); //checks column for duplicate values
void *columnValidationRoutine(void *sudoku); //checks if column is valid
int rowValidation(Sudoku* sudoku); //checks row for duplicate values
void *rowValidationRoutine(void *sudoku); //checks if row is valid
int subgrid3x3Validation(Sudoku* sudoku); // checks each subgrid for duplicate values
void  *subgrid3x3ValidationRoutine(void* sudoku); //checks if subgrid is valid

---- ALGORITHMS ----

>> A4: Briefly describe how you communicated to each worker thread
>> the work it should perform, as a void *
Each worker thread does not exactly communicate with each other. Each 
thread is created and runs its task in parallel to one another.

>> A5: Briefly describe the function(s) run by each worker. Explain
>> if any memory is shared among threads.
Due to the fact that the threads run in parallel and do not connect, 
no memory is shared among the threads. Each thread is assigned a pointer to each 
row, column, or subGrid. These threads check the validation of either a row, 
column, or subGrid. In addition, the threads run in parallel and return a boolean 
value (1 or 0). These bool values are stored in an array, which is used to determine 
the validity of the sudoku grid.

>> A6: Explain how the main thread knows when all the worker
>> threads have completed their work.
The main thread knows when all the worker threads have completed their 
work with pthread_join() because this is used as a wait while each thread is completed.

>> A7: Explain how the main thread knows when a particular worker
>> thread has reported a property as missing.
It writes it into (communicates with) a struct and that struct is shared 
between threads and main (for our code).

---- RATIONALE ----

>> A8: Explain how you ensured that your program has no resource leaks.
>> List all the free-able resources and, for each, explain how you
>> free them at the earliest possible time.
Threads are a free-able resource. We prevent threads from creating resource 
leaks by reaping the threads with pthread_join() after the threads have completed 
their task on their assigned row, column, or subgrid. When we fork a child process, 
it is reaped as soon as it has completed its task. This will prevent any resource leaks.

               FORKING SUDOKU CHECKER
               =======================

---- EXPLORE THE PROBLEM ----

>> B1: From a design perspective, is there any reason your
>> forking design cannot be as parallel as your threaded
>> solution? If not, how many child processes may be
>> running concurrently at any time?
Our forking design generates 27 children processes that are connected to one parent 
process. These children are split up between rows(9 children processes), 
columns (9 children processes) and the subgrids(9 children processes).

---- DATA STRUCTURES ----

>> B2: Copy here the declaration of each new `struct',
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 2--25 words.
>> Do not repeat anything already described in A2.
NA, we only used a single struct, and it is used for the threading partition of this project.

---- FUNCTIONS ----

>> B3: Provide a prototype and documentation for each function
>> you have introduced to support this portion of the project.
>> Use the Google Style Guide for function documentation.
>> Do not repeat anything already described in A3.
Same as A3. Utilized the functions to work with the forking portion.
     
---- ALGORITHMS ----

>> B4: Briefly describe the method of communicating with each child
>> process and if the function(s) run by each child were different than
>> the functions used by the child threads in Part A.
We expanded the same functions from Part A to fork() and generated 27 child 
processes attached to one parent. Each child process has the results of each row, 
column, and subgrid which is used to check validity. 

>> B5: Explain how the parent process knows when all the worker
>> child have completed their work.
The parent process knows when all the worker children have completed their 
work when waitpid() is called to communicate if each process has finished.

>> B6: Explain how the parent process knows when a particular worker
>> child has reported a property is missing.
The parent process knows when a particular worker child has reported a 
property as missing by viewing the WEXITSTATUS(value).

---- RATIONALE ----

>> B7: Explain how you ensured that your program has no resource leaks.
>> List all the free-able resources and, for each, explain how you
>> free them at the earliest possible time.
We terminate the children and join all threads after they have completed 
their tasks.



               SURVEY QUESTIONS
               ================

>> Answering these questions is optional, but it will help us improve the
>> course in future quarters.  Feel free to tell us anything you
>> want--these questions are just to spur your thoughts.  You may also
>> choose to respond anonymously in the course evaluations at the end of
>> the semester.

>> In your opinion, was this assignment, or any one of the problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you a greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?


